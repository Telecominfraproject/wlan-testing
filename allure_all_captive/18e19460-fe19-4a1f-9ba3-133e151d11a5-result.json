{"name": "test_Captive_Portal_WPA3_5g_Personal_NAT[setup_profiles0]", "status": "broken", "statusDetails": {"message": "paramiko.ssh_exception.SSHException: No existing session", "trace": "request = <SubRequest 'setup_profiles' for <Function test_Captive_Portal_Open_2g_NAT[setup_profiles0]>>, setup_controller = <controller.controller_2x.controller.Controller object at 0x7fac311c12b0>, testbed = 'interop-02'\nget_equipment_ref = ['903cb36ae4a3'], fixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7fac30cce280>, skip_lf = True, instantiate_profile = <class 'controller.controller_2x.controller.UProfileUtility'>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}, create_lanforge_chamberview_dut = '', lf_tools = False\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': 'localhost', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP4', 'mode': 'wifi5', ...}], 'contro...tation-Name': 'wlan0', '5G-Radio': ['1.1.wiphy1', '1.1.wiphy3'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.10.180', 'password': 'password', 'pk_password': 'whatever', 'port': 1812, ...}, get_apnos = <class 'apnos.apnos.APNOS'>\nradius_accounting_info = {'ip': '10.10.10.180', 'password': 'password', 'pk_password': 'whatever', 'port': 1813, ...}\n\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, get_equipment_ref, fixtures_ver, skip_lf,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos, radius_accounting_info):\n    \n        param = dict(request.param)\n        if not skip_lf:\n            lf_tools.reset_scenario()\n        # VLAN Setup\n            if request.param[\"mode\"] == \"VLAN\":\n    \n                vlan_list = list()\n                refactored_vlan_list = list()\n                ssid_modes = request.param[\"ssid_modes\"].keys()\n                for mode in ssid_modes:\n                    for ssid in range(len(request.param[\"ssid_modes\"][mode])):\n                        if \"vlan\" in request.param[\"ssid_modes\"][mode][ssid]:\n                            vlan_list.append(request.param[\"ssid_modes\"][mode][ssid][\"vlan\"])\n                        else:\n                            pass\n                if vlan_list:\n                    [refactored_vlan_list.append(x) for x in vlan_list if x not in refactored_vlan_list]\n                    vlan_list = refactored_vlan_list\n                    for i in range(len(vlan_list)):\n                        if vlan_list[i] > 4095 or vlan_list[i] < 1:\n                            vlan_list.pop(i)\n            if request.param[\"mode\"] == \"VLAN\":\n                lf_tools.add_vlan(vlan_ids=vlan_list)\n    \n        # call this, if 1.x\n>       return_var = fixtures_ver.setup_profiles(request, param, setup_controller, testbed, get_equipment_ref,\n                                                 instantiate_profile,\n                                                 get_markers, create_lanforge_chamberview_dut, lf_tools,\n                                                 get_security_flags, get_configuration, radius_info, get_apnos,\n                                                 radius_accounting_info, skip_lf=skip_lf)\n\ne2e/interOp/conftest.py:228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nfixtures_2x.py:558: in setup_profiles\n    ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\", sdk=\"2.x\")\n../libs/apnos/apnos.py:42: in __init__\n    client = self.ssh_cli_connect()\n../libs/apnos/apnos.py:82: in ssh_cli_connect\n    client.connect(self.ip, username=self.username, password=self.password,\n../../venv/lib/python3.8/site-packages/paramiko/client.py:412: in connect\n    server_key = t.get_remote_server_key()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <paramiko.Transport at 0x30c3bd30 (connecting)>\n\n    def get_remote_server_key(self):\n        \"\"\"\n        Return the host key of the server (in client mode).\n    \n        .. note::\n            Previously this call returned a tuple of ``(key type, key\n            string)``. You can get the same effect by calling `.PKey.get_name`\n            for the key type, and ``str(key)`` for the key string.\n    \n        :raises: `.SSHException` -- if no session is currently active.\n    \n        :return: public key (`.PKey`) of the remote server\n        \"\"\"\n        if (not self.active) or (not self.initial_kex_done):\n>           raise SSHException(\"No existing session\")\nE           paramiko.ssh_exception.SSHException: No existing session\n\n../../venv/lib/python3.8/site-packages/paramiko/transport.py:834: SSHException"}, "parameters": [{"name": "setup_profiles", "value": "{'mode': 'NAT', 'ssid_modes': {'open': [{'ssid_name': 'nat_captive_open_2g', 'appliedRadios': ['2G'], 'security': 'none'}, {'ssid_name': 'nat_captive_open_5g', 'appliedRadios': ['5G'], 'security': 'none'}], 'wpa': [{'ssid_name': 'nat_captive_wpa_2g', 'appliedRadios': ['2G'], 'security_key': 'lanforge', 'security': 'psk'}, {'ssid_name': 'nat_captive_wpa_5g', 'appliedRadios': ['5G'], 'security_key': 'lanforge', 'security': 'psk'}], 'wpa2_personal': [{'ssid_name': 'nat_captive_wpa2_2g', 'appliedRadios': ['2G'], 'security_key': 'lanforge', 'security': 'psk2'}, {'ssid_name': 'nat_captive_wpa2_5g', 'appliedRadios': ['5G'], 'security_key': 'lanforge', 'security': 'psk2'}], 'wpa3_personal': [{'ssid_name': 'nat_captive_wpa3_2g', 'appliedRadios': ['2G'], 'security_key': 'lanforge', 'security': 'sae'}, {'ssid_name': 'nat_captive_wpa3_5g', 'appliedRadios': ['5G'], 'security_key': 'lanforge', 'security': 'sae'}]}, 'rf': {}, 'radius': False, 'captive_portal': True}"}], "start": 1639235444489, "stop": 1639235444489, "uuid": "df1e1559-939c-402b-9adc-2046e06fe33a", "historyId": "35265621310ba6a645d5543ca4aed797", "testCaseId": "046d773312d3e6c5a0e2ac0369a992de", "fullName": "e2e.interOp.captive_portal.nat_mode.ios.test_captive_portal_modes.TestNatModeCaptivePortalSuiteOneNAT#test_Captive_Portal_WPA3_5g_Personal_NAT", "labels": [{"name": "suite", "value": "interop sanity"}, {"name": "subSuite", "value": "NAT Mode Captive Portal : Suite-A"}, {"name": "feature", "value": "NAT MODE CAPTIVE PORTAL"}, {"name": "tag", "value": "interop_ios"}, {"name": "tag", "value": "regression_interop"}, {"name": "tag", "value": "captive_portal"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "interop"}, {"name": "tag", "value": "ios"}, {"name": "tag", "value": "nat"}, {"name": "tag", "value": "wpa3_personal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "InteropsuiteA"}, {"name": "parentSuite", "value": "e2e.interOp.captive_portal.nat_mode.ios"}, {"name": "host", "value": "imgd"}, {"name": "thread", "value": "4282-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.interOp.captive_portal.nat_mode.ios.test_captive_portal_modes"}], "links": [{"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-5140", "name": "WIFI-5140"}]}