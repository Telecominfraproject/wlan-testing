{"name": "test_ClientConnect_2g_wpa3_personal_Bridge[setup_profiles0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "request = <FixtureRequest for <Function test_ClientConnect_2g_wpa3_personal_Bridge[setup_profiles0]>>, WifiName = 'wpa3_p_2g_QM4366', WifiPass = 'something'\nsetup_perfectoMobile = (<appium.webdriver.webdriver.WebDriver (session=\"c0640879-7ccb-4292-bda2-0c447fe9e7c8\")>, <perfecto.client.PerfectoReportiumClient.PerfectoReportiumClient object at 0x7f1446358a90>)\nconnData = {'BtnRunSpeedTest': \"//*[text()='RUN SPEED TEST']\", 'UploadMbps': \"//*[@id='knowledge-verticals-internetspeedtest__upl...[@class='spiqle']\", 'appPackage-android': 'com.android.settings', 'bundleId-iOS-Safari': 'com.apple.mobilesafari', ...}\n\n    def get_ip_address_ios(request, WifiName, WifiPass, setup_perfectoMobile, connData):\n        print(\"\\n-------------------------------------\")\n        print(\"Select Wifi/Get IP Address IOS Connection\")\n        print(\"-------------------------------------\")\n    \n        reportFlag = True\n        is_internet = False\n        ip_address_element_text = False\n    \n        print(\"Verifying Wifi/AP Connection Details....\")\n        report = setup_perfectoMobile[1]\n        driver = setup_perfectoMobile[0]\n    \n        report.step_start(\"Switching Driver Context\")\n        print(\"Switching Context to Native\")\n        driver.switch_to.context('NATIVE_APP')\n        # driver.switch_to.context(contexts[0])\n    \n        report.step_start(\"Set Wifi Network to \" + WifiName)\n        # Open Settings Application\n        openApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n    \n        try:\n            time.sleep(2)\n            driver.implicitly_wait(2)\n            try:\n                print(\"Verifying Connected Wifi Connection\")\n                report.step_start(\"Loading Wifi Page\")\n                element = driver.find_element_by_xpath(\"//XCUIElementTypeCell[@name='Wi-Fi']\")\n                element.click()\n            except NoSuchElementException:\n                print(\"Exception: Verify Xpath - unable to click on Wifi\")\n    \n            time.sleep(2)\n            driver.implicitly_wait(2)\n            # --------------------To Turn on WIFi Switch if already OFF--------------------------------\n            try:\n                get_wifi_switch_element = driver.find_element_by_xpath(\"//*[@label='Wi-Fi' and @value='0']\")\n                get_wifi_switch_element_text = get_wifi_switch_element.text\n                try:\n                    if get_wifi_switch_element_text == \"0\" or get_wifi_switch_element_text == 0:\n                        get_wifi_switch_element = driver.find_element_by_xpath(\"//*[@label='Wi-Fi' and @value='0']\")\n                        driver.implicitly_wait(1)\n                        get_wifi_switch_element.click()\n                        driver.implicitly_wait(1)\n                        i = 0\n                        for i in range(5):\n                            try:\n                                get_wifi_switch_element = driver.find_element_by_xpath(\"//*[@label='Wi-Fi' and @value='1']\")\n                                get_wifi_switch_element_text = get_wifi_switch_element.text\n                            except:\n                                print(\"Switch is OFF\")\n    \n                            if get_wifi_switch_element_text == \"1\" or get_wifi_switch_element_text == 1:\n                                print(\"WIFI Switch is ON\")\n                                break\n                            else:\n                                try:\n                                    get_wifi_switch_element = driver.find_element_by_xpath(\n                                        \"//*[@label='Wi-Fi' and @value='0']\")\n                                    get_wifi_switch_element_text = get_wifi_switch_element.text\n                                except:\n                                    print(\"WIFi switch is ON\")\n                        if (get_wifi_switch_element_text == \"0\" or get_wifi_switch_element_text == 0):\n                            print(\"switch is still OFF\")\n                            closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                            return ip_address_element_text, is_internet\n                    else:\n                        print(\"Switch is Still OFF\")\n                        closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                        return ip_address_element_text, is_internet\n                except:\n                    print(\"No switch element found\")\n            except:\n                print(\"get_wifi_switch_element is ON\")\n            # --------------------To Turn on WIFi Switch if already OFF--------------------------------\n    \n        except:\n            print(\"Cannot find WIFI element\")\n            closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n            return ip_address_element_text, is_internet\n    \n        # ---------------------This is to Forget current connected SSID-------------------------------\n    \n        try:\n            time.sleep(3)\n            print(\"getting in to Additional details\")\n            report.step_start(\"Clicking More Info\")\n            additional_details_element = driver.find_element_by_xpath(\"//*[@label='selected']/parent::*/parent::*/XCUIElementTypeButton[@label='More Info']\")\n            additional_details_element.click()\n            try:\n                print(\"Forget Connected Network\")\n                forget_ssid = WebDriverWait(driver, 30).until(EC.presence_of_element_located((MobileBy.XPATH, \"//*[@label='Forget This Network']\")))\n                forget_ssid.click()\n                print(\"Forget old ssid\")\n                try:\n                    report.step_start(\"Forget SSID popup1\")\n                    forget_ssid_popup = WebDriverWait(driver, 30).until(EC.presence_of_element_located((MobileBy.XPATH, \"//*[@label='Forget']\")))\n                    forget_ssid_popup.click()\n    \n                    print(\"**alert** Forget SSID popup killed **alert**\")\n                except:\n                    print(\"Forget SSID popup not found\")\n            except:\n                print(\"couldn't find forget ssid element\")\n        except:\n            print(\"No connected SSID\")\n    \n        # ---------------------This is to Forget current connected SSID-------------------------------\n    \n        # ---------------------To get all available SSID-------------------------------\n        print(\"Searching for Wifi: \" + WifiName)\n        # allure.attach(name= body=str(\"Searching for Wifi: \" + WifiName))\n        time.sleep(2)\n        report.step_start(\"Searching SSID\")\n        print(\"Selecting Wifi: \" + WifiName)\n        ssid_found = False\n        available_ssids = False\n    \n        try:\n            for check_for_all_ssids in range(9):\n                available_ssids = get_all_available_ssids(driver)\n                allure.attach(name=\"Available SSIDs in device: \", body=str(available_ssids))\n                try:\n                    if WifiName not in available_ssids:\n                        scrollDown(setup_perfectoMobile)\n                        time.sleep(2)\n                    else:\n                        report.step_start(\"Selecting SSID To Connect\")\n                        ssid_found = True\n                        print(WifiName + \" : Found in Device\")\n                        wifiSelElement = WebDriverWait(driver, 30).until(EC.presence_of_element_located((MobileBy.XPATH, \"//*[@label='\" + WifiName + \"']\")))\n                        wifiSelElement.click()\n                        print(\"Selecting SSID\")\n                        # allure.attach(name= body=str(WifiName + \" : Found in Device\"))\n                        break\n                except:\n                    print(\"couldn't connect to \" + WifiName)\n                    request.config.cache.set(key=\"SelectingWifiFailed\", value=str(e))\n                    closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                    return ip_address_element_text, is_internet\n                    pass\n    \n            if not ssid_found:\n                print(\"could not found \" + WifiName + \" in device\")\n                closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                return ip_address_element_text, is_internet\n        except:\n            pass\n        # ---------------------To get all available SSID-------------------------------\n    \n        # ---------------------This is to Select SSID-------------------------------\n    \n        # ---------------------This is to Select SSID-------------------------------\n        try:\n            print(\"Confirming SSID Connected\")\n>           wifiSelectionElement = WebDriverWait(driver, 30).until(EC.presence_of_element_located((MobileBy.XPATH, \"//*[@label='Enter the password for \" + WifiName + \"']\")))\n\n../libs/perfecto_libs/iOS_lib.py:1056: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c0640879-7ccb-4292-bda2-0c447fe9e7c8\")>, method = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7f14463580a0>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE           at sun.reflect.NativeConstructorAccessorImpl.newInstance0 (NativeConstructorAccessorImpl.java:-2)\nE           at sun.reflect.NativeConstructorAccessorImpl.newInstance (NativeConstructorAccessorImpl.java:62)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:45)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:423)\nE           at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException (W3CHttpResponseCodec.java:187)\nE           at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode (W3CHttpResponseCodec.java:122)\nE           at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode (W3CHttpResponseCodec.java:49)\nE           at org.openqa.selenium.remote.HttpCommandExecutor.execute (HttpCommandExecutor.java:158)\nE           at io.appium.java_client.remote.AppiumCommandExecutor.execute (AppiumCommandExecutor.java:239)\nE           at org.openqa.selenium.remote.RemoteWebDriver.execute (RemoteWebDriver.java:552)\nE           at io.appium.java_client.DefaultGenericMobileDriver.execute (DefaultGenericMobileDriver.java:41)\nE           at io.appium.java_client.AppiumDriver.execute (AppiumDriver.java:1)\nE           at io.appium.java_client.ios.IOSDriver.execute (IOSDriver.java:1)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElement (RemoteWebDriver.java:323)\nE           at io.appium.java_client.DefaultGenericMobileDriver.findElement (DefaultGenericMobileDriver.java:61)\nE           at io.appium.java_client.AppiumDriver.findElement (AppiumDriver.java:1)\nE           at io.appium.java_client.ios.IOSDriver.findElement (IOSDriver.java:1)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath (RemoteWebDriver.java:428)\nE           at io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath (DefaultGenericMobileDriver.java:151)\nE           at io.appium.java_client.AppiumDriver.findElementByXPath (AppiumDriver.java:1)\nE           at io.appium.java_client.ios.IOSDriver.findElementByXPath (IOSDriver.java:1)\nE           at org.openqa.selenium.By$ByXPath.findElement (By.java:353)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElement (RemoteWebDriver.java:315)\nE           at io.appium.java_client.DefaultGenericMobileDriver.findElement (DefaultGenericMobileDriver.java:57)\nE           at io.appium.java_client.AppiumDriver.findElement (AppiumDriver.java:1)\nE           at io.appium.java_client.ios.IOSDriver.findElement (IOSDriver.java:1)\nE           at com.perfectomobile.selenium.server.appium.AppiumIOSDriverWrapper$2.call (AppiumIOSDriverWrapper.java:94)\nE           at com.nexperience.function.execute.ExecuteCallableCommand.process (ExecuteCallableCommand.java:30)\nE           at com.nexperience.engine.script.command.AbstractScriptCommand.doExecute (AbstractScriptCommand.java:173)\nE           at com.nexperience.engine.script.command.ScriptCommandBase.execute (ScriptCommandBase.java:105)\nE           at com.nexperience.engine.script.tcl.event.CommandTclEvent.processEvent (CommandTclEvent.java:43)\nE           at com.nexperience.engine.script.tcl.event.MaseTclEvent.processEvent (MaseTclEvent.java:56)\nE           at tcl.lang.Notifier.serviceEvent (Notifier.java:457)\nE           at tcl.lang.Notifier.doOneEvent (Notifier.java:610)\nE           at tcl.lang.Notifier.processTclEvents (Notifier.java:786)\nE           at com.nexperience.engine.script.tcl.event.TclEventProcessor.start (TclEventProcessor.java:80)\nE           at com.nexperience.engine.script.tcl.TclInterpreter.startEventProcessing (TclInterpreter.java:552)\nE           at com.nexperience.engine.script.execution.step.StepExecutionEventProcessor.callImpl (StepExecutionEventProcessor.java:85)\nE           at com.nexperience.engine.script.execution.step.StepExecutionEventProcessor.callImpl (StepExecutionEventProcessor.java:21)\nE           at com.nexperience.util.thread.WrappedCallable.call (WrappedCallable.java:31)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:266)\nE           at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)\nE           at java.lang.Thread.run (Thread.java:748)\n\n../../venv/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.e2e.interOp.validation_of_operating_modes.bridge_mode.client_connect_test.iOS.test_general_security_modes.TestBridgeModeConnectSuiteTwo object at 0x7f1447556a30>\nrequest = <FixtureRequest for <Function test_ClientConnect_2g_wpa3_personal_Bridge[setup_profiles0]>>, get_vif_state = ['wpa3_p_2g_QM4366'], get_ap_logs = None\nget_APToMobileDevice_data = {'BtnRunSpeedTest': \"//*[text()='RUN SPEED TEST']\", 'UploadMbps': \"//*[@id='knowledge-verticals-internetspeedtest__upl...[@class='spiqle']\", 'appPackage-android': 'com.android.settings', 'bundleId-iOS-Safari': 'com.apple.mobilesafari', ...}\nsetup_perfectoMobile_iOS = (<appium.webdriver.webdriver.WebDriver (session=\"c0640879-7ccb-4292-bda2-0c447fe9e7c8\")>, <perfecto.client.PerfectoReportiumClient.PerfectoReportiumClient object at 0x7f1446358a90>)\n\n    @allure.testcase(url=\"https://telecominfraproject.atlassian.net/browse/WIFI-4546\", name=\"WIFI-4546\")\n    @pytest.mark.twog\n    @pytest.mark.wpa3_personal\n    @pytest.mark.sg123\n    def test_ClientConnect_2g_wpa3_personal_Bridge(self, request, get_vif_state, get_ap_logs,  get_APToMobileDevice_data, setup_perfectoMobile_iOS):\n    \n        profile_data = setup_params_general_two[\"ssid_modes\"][\"wpa3_personal\"][0]\n        ssidName = profile_data[\"ssid_name\"]\n        ssidPassword = profile_data[\"security_key\"]\n        print (\"SSID_NAME: \" + ssidName)\n        print (\"SSID_PASS: \" + ssidPassword)\n        get_vif_state.append(ssidName)\n    \n        if ssidName not in get_vif_state:\n            allure.attach(name=\"retest,vif state ssid not available:\", body=str(get_vif_state))\n            pytest.xfail(\"SSID NOT AVAILABLE IN VIF STATE\")\n    \n        report = setup_perfectoMobile_iOS[1]\n        driver = setup_perfectoMobile_iOS[0]\n        connData = get_APToMobileDevice_data\n    \n        # Set Wifi/AP Mode\n>       ip, is_internet = get_ip_address_ios(request, ssidName, ssidPassword, setup_perfectoMobile_iOS, connData)\n\ne2e/interOp/validation_of_operating_modes/bridge_mode/client_connect_test/iOS/test_general_security_modes.py:379: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nrequest = <FixtureRequest for <Function test_ClientConnect_2g_wpa3_personal_Bridge[setup_profiles0]>>, WifiName = 'wpa3_p_2g_QM4366', WifiPass = 'something'\nsetup_perfectoMobile = (<appium.webdriver.webdriver.WebDriver (session=\"c0640879-7ccb-4292-bda2-0c447fe9e7c8\")>, <perfecto.client.PerfectoReportiumClient.PerfectoReportiumClient object at 0x7f1446358a90>)\nconnData = {'BtnRunSpeedTest': \"//*[text()='RUN SPEED TEST']\", 'UploadMbps': \"//*[@id='knowledge-verticals-internetspeedtest__upl...[@class='spiqle']\", 'appPackage-android': 'com.android.settings', 'bundleId-iOS-Safari': 'com.apple.mobilesafari', ...}\n\n    def get_ip_address_ios(request, WifiName, WifiPass, setup_perfectoMobile, connData):\n        print(\"\\n-------------------------------------\")\n        print(\"Select Wifi/Get IP Address IOS Connection\")\n        print(\"-------------------------------------\")\n    \n        reportFlag = True\n        is_internet = False\n        ip_address_element_text = False\n    \n        print(\"Verifying Wifi/AP Connection Details....\")\n        report = setup_perfectoMobile[1]\n        driver = setup_perfectoMobile[0]\n    \n        report.step_start(\"Switching Driver Context\")\n        print(\"Switching Context to Native\")\n        driver.switch_to.context('NATIVE_APP')\n        # driver.switch_to.context(contexts[0])\n    \n        report.step_start(\"Set Wifi Network to \" + WifiName)\n        # Open Settings Application\n        openApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n    \n        try:\n            time.sleep(2)\n            driver.implicitly_wait(2)\n            try:\n                print(\"Verifying Connected Wifi Connection\")\n                report.step_start(\"Loading Wifi Page\")\n                element = driver.find_element_by_xpath(\"//XCUIElementTypeCell[@name='Wi-Fi']\")\n                element.click()\n            except NoSuchElementException:\n                print(\"Exception: Verify Xpath - unable to click on Wifi\")\n    \n            time.sleep(2)\n            driver.implicitly_wait(2)\n            # --------------------To Turn on WIFi Switch if already OFF--------------------------------\n            try:\n                get_wifi_switch_element = driver.find_element_by_xpath(\"//*[@label='Wi-Fi' and @value='0']\")\n                get_wifi_switch_element_text = get_wifi_switch_element.text\n                try:\n                    if get_wifi_switch_element_text == \"0\" or get_wifi_switch_element_text == 0:\n                        get_wifi_switch_element = driver.find_element_by_xpath(\"//*[@label='Wi-Fi' and @value='0']\")\n                        driver.implicitly_wait(1)\n                        get_wifi_switch_element.click()\n                        driver.implicitly_wait(1)\n                        i = 0\n                        for i in range(5):\n                            try:\n                                get_wifi_switch_element = driver.find_element_by_xpath(\"//*[@label='Wi-Fi' and @value='1']\")\n                                get_wifi_switch_element_text = get_wifi_switch_element.text\n                            except:\n                                print(\"Switch is OFF\")\n    \n                            if get_wifi_switch_element_text == \"1\" or get_wifi_switch_element_text == 1:\n                                print(\"WIFI Switch is ON\")\n                                break\n                            else:\n                                try:\n                                    get_wifi_switch_element = driver.find_element_by_xpath(\n                                        \"//*[@label='Wi-Fi' and @value='0']\")\n                                    get_wifi_switch_element_text = get_wifi_switch_element.text\n                                except:\n                                    print(\"WIFi switch is ON\")\n                        if (get_wifi_switch_element_text == \"0\" or get_wifi_switch_element_text == 0):\n                            print(\"switch is still OFF\")\n                            closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                            return ip_address_element_text, is_internet\n                    else:\n                        print(\"Switch is Still OFF\")\n                        closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                        return ip_address_element_text, is_internet\n                except:\n                    print(\"No switch element found\")\n            except:\n                print(\"get_wifi_switch_element is ON\")\n            # --------------------To Turn on WIFi Switch if already OFF--------------------------------\n    \n        except:\n            print(\"Cannot find WIFI element\")\n            closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n            return ip_address_element_text, is_internet\n    \n        # ---------------------This is to Forget current connected SSID-------------------------------\n    \n        try:\n            time.sleep(3)\n            print(\"getting in to Additional details\")\n            report.step_start(\"Clicking More Info\")\n            additional_details_element = driver.find_element_by_xpath(\"//*[@label='selected']/parent::*/parent::*/XCUIElementTypeButton[@label='More Info']\")\n            additional_details_element.click()\n            try:\n                print(\"Forget Connected Network\")\n                forget_ssid = WebDriverWait(driver, 30).until(EC.presence_of_element_located((MobileBy.XPATH, \"//*[@label='Forget This Network']\")))\n                forget_ssid.click()\n                print(\"Forget old ssid\")\n                try:\n                    report.step_start(\"Forget SSID popup1\")\n                    forget_ssid_popup = WebDriverWait(driver, 30).until(EC.presence_of_element_located((MobileBy.XPATH, \"//*[@label='Forget']\")))\n                    forget_ssid_popup.click()\n    \n                    print(\"**alert** Forget SSID popup killed **alert**\")\n                except:\n                    print(\"Forget SSID popup not found\")\n            except:\n                print(\"couldn't find forget ssid element\")\n        except:\n            print(\"No connected SSID\")\n    \n        # ---------------------This is to Forget current connected SSID-------------------------------\n    \n        # ---------------------To get all available SSID-------------------------------\n        print(\"Searching for Wifi: \" + WifiName)\n        # allure.attach(name= body=str(\"Searching for Wifi: \" + WifiName))\n        time.sleep(2)\n        report.step_start(\"Searching SSID\")\n        print(\"Selecting Wifi: \" + WifiName)\n        ssid_found = False\n        available_ssids = False\n    \n        try:\n            for check_for_all_ssids in range(9):\n                available_ssids = get_all_available_ssids(driver)\n                allure.attach(name=\"Available SSIDs in device: \", body=str(available_ssids))\n                try:\n                    if WifiName not in available_ssids:\n                        scrollDown(setup_perfectoMobile)\n                        time.sleep(2)\n                    else:\n                        report.step_start(\"Selecting SSID To Connect\")\n                        ssid_found = True\n                        print(WifiName + \" : Found in Device\")\n                        wifiSelElement = WebDriverWait(driver, 30).until(EC.presence_of_element_located((MobileBy.XPATH, \"//*[@label='\" + WifiName + \"']\")))\n                        wifiSelElement.click()\n                        print(\"Selecting SSID\")\n                        # allure.attach(name= body=str(WifiName + \" : Found in Device\"))\n                        break\n                except:\n                    print(\"couldn't connect to \" + WifiName)\n                    request.config.cache.set(key=\"SelectingWifiFailed\", value=str(e))\n                    closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                    return ip_address_element_text, is_internet\n                    pass\n    \n            if not ssid_found:\n                print(\"could not found \" + WifiName + \" in device\")\n                closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                return ip_address_element_text, is_internet\n        except:\n            pass\n        # ---------------------To get all available SSID-------------------------------\n    \n        # ---------------------This is to Select SSID-------------------------------\n    \n        # ---------------------This is to Select SSID-------------------------------\n        try:\n            print(\"Confirming SSID Connected\")\n            wifiSelectionElement = WebDriverWait(driver, 30).until(EC.presence_of_element_located((MobileBy.XPATH, \"//*[@label='Enter the password for \" + WifiName + \"']\")))\n            wifiSelectionElement.click()\n        except Exception as e:\n            print(\"SSID Connected is Different\")\n            reportFlag = False\n>           assert reportFlag\nE           AssertionError\n\n../libs/perfecto_libs/iOS_lib.py:1061: AssertionError"}, "attachments": [{"name": "Available SSIDs in device: ", "source": "e8c3d70e-6d79-4e92-b9d6-271024130f20-attachment.attach"}], "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'wpa3_personal': [{'ssid_name': 'wpa3_p_2g_QM4366', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'sae'}, {'ssid_name': 'wpa3_p_5g_MB7703', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'sae'}], 'wpa3_personal_mixed': [{'ssid_name': 'wpa3_p_m_2g_8S122', 'appliedRadios': ['2G'], 'security_key': 'something'}, {'ssid_name': 'wpa3_p_m_5g_G81850', 'appliedRadios': ['5G'], 'security_key': 'something'}], 'wpa_wpa2_personal_mixed': [{'ssid_name': 'wpa_wpa2_p_m_2g_PW3625', 'appliedRadios': ['2G'], 'security_key': 'something'}, {'ssid_name': 'wpa_wpa2_p_m_5g_B75235', 'appliedRadios': ['5G'], 'security_key': 'something'}]}, 'rf': {}, 'radius': False}"}], "start": 1640186201224, "stop": 1640186286558, "uuid": "ef603c54-6b87-4494-ba20-0b55bf275a24", "historyId": "bef4fd23debb9df543bec8efeab43044", "testCaseId": "3bba2474f875745b399a634e341ef76f", "fullName": "e2e.interOp.validation_of_operating_modes.bridge_mode.client_connect_test.iOS.test_general_security_modes.TestBridgeModeConnectSuiteTwo#test_ClientConnect_2g_wpa3_personal_Bridge", "labels": [{"name": "subSuite", "value": "Bridge Mode Client Connect : Suite-B"}, {"name": "suite", "value": "interop sanity"}, {"name": "feature", "value": "BRIDGE MODE CLIENT CONNECT"}, {"name": "tag", "value": "client_connect"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "sg123"}, {"name": "tag", "value": "interop"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "interop_uc_sanity"}, {"name": "tag", "value": "wpa3_personal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "interop_ios"}, {"name": "tag", "value": "InteropsuiteB"}, {"name": "tag", "value": "ios"}, {"name": "tag", "value": "bridge"}, {"name": "parentSuite", "value": "e2e.interOp.validation_of_operating_modes.bridge_mode.client_connect_test.iOS"}, {"name": "host", "value": "imgd"}, {"name": "thread", "value": "21951-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.interOp.validation_of_operating_modes.bridge_mode.client_connect_test.iOS.test_general_security_modes"}], "links": [{"type": "link", "url": "https://tip.app.perfectomobile.com/reporting/library?externalId[0]=c0640879-7ccb-4292-bda2-0c447fe9e7c8", "name": "iPhone-11"}, {"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-4546", "name": "WIFI-4546"}]}