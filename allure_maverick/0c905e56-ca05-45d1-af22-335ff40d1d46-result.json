{"name": "test_Maverick", "status": "broken", "statusDetails": {"message": "paramiko.ssh_exception.SSHException: No existing session", "trace": "request = <SubRequest 'set_maverick_mode_all' for <Function test_Maverick>>\nget_configuration = {'access_point': [{'ip': 'localhost', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP4', 'mode': 'wifi5', ...}], 'contro...tation-Name': 'wlan0', '5G-Radio': ['1.1.wiphy1', '1.1.wiphy3'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nget_apnos = <class 'apnos.apnos.APNOS'>, fixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7efe09345d30>\n\n    @pytest.fixture(scope=\"class\")\n    def set_maverick_mode_all(request, get_configuration, get_apnos, fixtures_ver):\n        connected = 0\n        redirector_data = None\n        for access_point_info in get_configuration['access_point']:\n>           ap_ssh = get_apnos(access_point_info, sdk=\"2.x\")\n\ne2e/interOp/conftest.py:640: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../libs/apnos/apnos.py:42: in __init__\n    client = self.ssh_cli_connect()\n../libs/apnos/apnos.py:82: in ssh_cli_connect\n    client.connect(self.ip, username=self.username, password=self.password,\n../../venv/lib/python3.8/site-packages/paramiko/client.py:412: in connect\n    server_key = t.get_remote_server_key()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <paramiko.Transport at 0x9345e80 (connecting)>\n\n    def get_remote_server_key(self):\n        \"\"\"\n        Return the host key of the server (in client mode).\n    \n        .. note::\n            Previously this call returned a tuple of ``(key type, key\n            string)``. You can get the same effect by calling `.PKey.get_name`\n            for the key type, and ``str(key)`` for the key string.\n    \n        :raises: `.SSHException` -- if no session is currently active.\n    \n        :return: public key (`.PKey`) of the remote server\n        \"\"\"\n        if (not self.active) or (not self.initial_kex_done):\n>           raise SSHException(\"No existing session\")\nE           paramiko.ssh_exception.SSHException: No existing session\n\n../../venv/lib/python3.8/site-packages/paramiko/transport.py:834: SSHException"}, "start": 1640786584465, "stop": 1640786584465, "uuid": "e9371ecc-874b-49cf-88ec-aa94d8106907", "historyId": "92b0315abeb9403d22573eb786ab2f7c", "testCaseId": "0716a199f5d1436619e16a9d32c4fd69", "fullName": "e2e.interOp.Maverick.iOS.test_maverick_mode.TestMavericMode#test_Maverick", "labels": [{"name": "feature", "value": "MAVERICK MODE"}, {"name": "subSuite", "value": "Maverick Mode Client Connect : Suite-A"}, {"name": "suite", "value": "interop sanity"}, {"name": "tag", "value": "maverick123"}, {"name": "tag", "value": "interop_ios"}, {"name": "tag", "value": "client_connect"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "InteropsuiteA"}, {"name": "tag", "value": "interop_uc_sanity"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "interop"}, {"name": "tag", "value": "ios"}, {"name": "parentSuite", "value": "e2e.interOp.Maverick.iOS"}, {"name": "host", "value": "imgd"}, {"name": "thread", "value": "90635-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.interOp.Maverick.iOS.test_maverick_mode"}]}