{"name": "test_Captive_Portal_WPA2_5g_Personal_NAT[setup_profiles0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "request = <FixtureRequest for <Function test_Captive_Portal_WPA2_5g_Personal_NAT[setup_profiles0]>>, WifiName = 'nat_captive_wpa2_5g', WifiPass = 'lanforge'\nsetup_perfectoMobile = (<appium.webdriver.webdriver.WebDriver (session=\"946f5764-358c-407d-ab86-5c81d76c5047\")>, <perfecto.client.PerfectoReportiumClient.PerfectoReportiumClient object at 0x7f681365a1c0>)\nconnData = {'BtnRunSpeedTest': \"//*[text()='RUN SPEED TEST']\", 'UploadMbps': \"//*[@id='knowledge-verticals-internetspeedtest__upl...[@class='spiqle']\", 'appPackage-android': 'com.android.settings', 'bundleId-iOS-Safari': 'com.apple.mobilesafari', ...}\n\n    def captive_portal_ios(request, WifiName, WifiPass, setup_perfectoMobile, connData):\n        print(\"\\n-------------------------------------\")\n        print(\"CaptivePortal Connection IOS\")\n        print(\"-------------------------------------\")\n    \n        reportFlag = True\n        is_internet = False\n        ip_address_element_text = False\n    \n        print(\"Verifying Wifi/AP Connection Details....\")\n        report = setup_perfectoMobile[1]\n        driver = setup_perfectoMobile[0]\n    \n        report.step_start(\"Switching Driver Context\")\n        print(\"Switching Context to Native\")\n        driver.switch_to.context('NATIVE_APP')\n        # driver.switch_to.context(contexts[0])\n    \n        report.step_start(\"Set Wifi Network to \" + WifiName)\n        # Open Settings Application\n        openApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n    \n        try:\n            time.sleep(2)\n            driver.implicitly_wait(2)\n            try:\n                print(\"Verifying Connected Wifi Connection\")\n                report.step_start(\"Loading Wifi Page\")\n                element = driver.find_element_by_xpath(\"//XCUIElementTypeCell[@name='Wi-Fi']\")\n                element.click()\n            except NoSuchElementException:\n                print(\"Exception: Verify Xpath - unable to click on Wifi\")\n    \n            time.sleep(2)\n            driver.implicitly_wait(2)\n            # --------------------To Turn on WIFi Switch if already OFF--------------------------------\n            try:\n                get_wifi_switch_element = driver.find_element_by_xpath(\"//*[@label='Wi-Fi' and @value='0']\")\n                get_wifi_switch_element_text = get_wifi_switch_element.text\n                try:\n                    if get_wifi_switch_element_text == \"0\" or get_wifi_switch_element_text == 0:\n                        get_wifi_switch_element = driver.find_element_by_xpath(\"//*[@label='Wi-Fi' and @value='0']\")\n                        driver.implicitly_wait(1)\n                        get_wifi_switch_element.click()\n                        driver.implicitly_wait(1)\n                        i = 0\n                        for i in range(5):\n                            try:\n                                get_wifi_switch_element = driver.find_element_by_xpath(\"//*[@label='Wi-Fi' and @value='1']\")\n                                get_wifi_switch_element_text = get_wifi_switch_element.text\n                            except:\n                                print(\"switch is OFF\")\n    \n                            if get_wifi_switch_element_text == \"1\" or get_wifi_switch_element_text == 1:\n                                print(\"WIFI Switch is ON\")\n                                break\n                            else:\n                                try:\n                                    get_wifi_switch_element = driver.find_element_by_xpath(\n                                        \"//*[@label='Wi-Fi' and @value='0']\")\n                                    get_wifi_switch_element_text = get_wifi_switch_element.text\n                                except:\n                                    print(\"WIFi switch is ON\")\n                        if (get_wifi_switch_element_text == \"0\" or get_wifi_switch_element_text == 0):\n                            print(\"switch is still OFF\")\n                            closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                            #return is_internet\n                    else:\n                        print(\"Switch is Still OFF\")\n                        closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                        #return is_internet\n                except:\n                    print(\"No switch element found\")\n            except:\n                print(\"get_wifi_switch_element is ON\")\n            # --------------------To Turn on WIFi Switch if already OFF--------------------------------\n    \n        except:\n            print(\"Cannot find WIFI element\")\n            closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n            #return is_internet\n    \n        # ---------------------This is to Forget current connected SSID-------------------------------\n    \n        try:\n            print(\"getting in to Additional details\")\n            additional_details_element = driver.find_element_by_xpath(\n                \"//*[@label='selected']/parent::*/parent::*/XCUIElementTypeButton[@label='More Info']\")\n            additional_details_element.click()\n            try:\n                print(\"Forget Connected Network\")\n                forget_ssid = driver.find_element_by_xpath(\"//*[@label='Forget This Network']\")\n                forget_ssid.click()\n                print(\"Forget old ssid\")\n                try:\n                    report.step_start(\"Forget SSID popup1\")\n                    forget_ssid_popup = driver.find_element_by_xpath(\"//*[@label='Forget']\")\n                    forget_ssid_popup.click()\n    \n                    print(\"**alert** Forget SSID popup killed **alert**\")\n                except:\n                    print(\"Forget SSID popup not found\")\n            except:\n                print(\"couldn't find forget ssid element\")\n        except:\n            print(\"No connected SSID\")\n    \n        # ---------------------This is to Forget current connected SSID-------------------------------\n    \n        # ---------------------To get all available SSID-------------------------------\n        print(\"Searching for Wifi: \" + WifiName)\n        # allure.attach(name= body=str(\"Searching for Wifi: \" + WifiName))\n        time.sleep(2)\n        print(\"Selecting Wifi: \" + WifiName)\n        ssid_found = False\n        available_ssids = False\n    \n        try:\n            for check_for_all_ssids in range(2):\n                available_ssids = get_all_available_ssids(driver)\n                try:\n                    if WifiName not in available_ssids:\n                        scrollDown(setup_perfectoMobile)\n                        time.sleep(2)\n                    else:\n                        ssid_found = True\n                        print(WifiName + \" : Found in Device\")\n                        # allure.attach(name= body=str(WifiName + \" : Found in Device\"))\n                        break\n                except:\n                    pass\n    \n            if not ssid_found:\n                print(\"could not found \" + WifiName + \" in device\")\n                closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                return is_internet\n        except:\n            pass\n        # ---------------------To get all available SSID-------------------------------\n    \n        # ---------------------This is to Select SSID-------------------------------\n        try:\n            wifiSelectionElement = WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located((MobileBy.XPATH, \"//*[@label='\" + WifiName + \"']\")))\n            wifiSelectionElement.click()\n            print(\"Selecting SSID\")\n        except Exception as e:\n            print(\"couldn't connect to \" + WifiName)\n            request.config.cache.set(key=\"SelectingWifiFailed\", value=str(e))\n            closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n            return is_internet\n        # ---------------------This is to Select SSID-------------------------------\n    \n        # ---------------------Set Password-------------------------------\n        try:\n            wifiPassword = driver.find_element_by_xpath(\"//*[@label='Password']\")\n            wifiPassword.send_keys(WifiPass)\n        except NoSuchElementException:\n            print(\"Enter Password Page Not Loaded\")\n        # ---------------------Set Password-------------------------------\n    \n        # ---------------------Click on join-------------------------------\n        try:\n            joinBTN = driver.find_element_by_xpath(\"//*[@label='Join']\")\n            joinBTN.click()\n        except Exception as e:\n            print(\"Join Button Not Enabled...Password may not be needed\")\n        # ---------------------Click on join-------------------------------\n    \n        try:\n            time.sleep(8)\n            driver.implicitly_wait(8)\n            try:\n                time.sleep(12)\n                driver.implicitly_wait(8)\n                print(\"Acceptiong terms and Services\")\n                report.step_start(\"loading Terms Page\")\n>               element = driver.find_element_by_xpath(\"//*[@label='Accept Terms of Service']\")\n\n../libs/perfecto_libs/iOS_lib.py:2310: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"946f5764-358c-407d-ab86-5c81d76c5047\")>, xpath = \"//*[@label='Accept Terms of Service']\"\n\n    def find_element_by_xpath(self, xpath):\n        \"\"\"\n        Finds an element by xpath.\n    \n        :Args:\n         - xpath - The xpath locator of the element to find.\n    \n        :Returns:\n         - WebElement - the element if it was found\n    \n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n    \n        :Usage:\n            element = driver.find_element_by_xpath('//div/td[1]')\n        \"\"\"\n>       return self.find_element(by=By.XPATH, value=xpath)\n\n../../venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:394: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"946f5764-358c-407d-ab86-5c81d76c5047\")>, by = 'xpath', value = \"//*[@label='Accept Terms of Service']\"\n\n    def find_element(self, by: str = By.ID, value: Union[str, Dict] = None) -> MobileWebElement:\n        \"\"\"'Private' method used by the find_element_by_* methods.\n    \n        Override for Appium\n    \n        Usage:\n            Use the corresponding find_element_by_* instead of this.\n    \n        Returns:\n            `appium.webdriver.webelement.WebElement`: The found element\n    \n        \"\"\"\n        # TODO: If we need, we should enable below converter for Web context\n        # if self.w3c:\n        #     if by == By.ID:\n        #         by = By.CSS_SELECTOR\n        #         value = '[id=\"%s\"]' % value\n        #     elif by == By.TAG_NAME:\n        #         by = By.CSS_SELECTOR\n        #     elif by == By.CLASS_NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = \".%s\" % value\n        #     elif by == By.NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = '[name=\"%s\"]' % value\n    \n>       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']\n\n../../venv/lib/python3.8/site-packages/appium/webdriver/webdriver.py:414: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"946f5764-358c-407d-ab86-5c81d76c5047\")>, driver_command = 'findElement'\nparams = {'sessionId': '946f5764-358c-407d-ab86-5c81d76c5047', 'using': 'xpath', 'value': \"//*[@label='Accept Terms of Service']\"}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n../../venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x7f681365abe0>\nresponse = {'status': 500, 'value': '{\\n  \"sessionId\": \"eb3b51b4-4d38-4d00-b636-6b31da763f65\",\\n  \"state\": \"no such element\",\\n  ...8\",\\n      \"releaseLabel\": \"3.141.59\",\\n      \"class\": \"org.openqa.selenium.BuildInfo\"\\n    }\\n  },\\n  \"status\": 7\\n}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n            super().check_response(response)\n        except WebDriverException as wde:\n            if wde.msg == 'No such context found.':\n                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde\n            else:\n>               raise wde\n\n../../venv/lib/python3.8/site-packages/appium/webdriver/errorhandler.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x7f681365abe0>\nresponse = {'status': 500, 'value': '{\\n  \"sessionId\": \"eb3b51b4-4d38-4d00-b636-6b31da763f65\",\\n  \"state\": \"no such element\",\\n  ...8\",\\n      \"releaseLabel\": \"3.141.59\",\\n      \"class\": \"org.openqa.selenium.BuildInfo\"\\n    }\\n  },\\n  \"status\": 7\\n}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n>           super().check_response(response)\n\n../../venv/lib/python3.8/site-packages/appium/webdriver/errorhandler.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x7f681365abe0>\nresponse = {'status': 500, 'value': '{\\n  \"sessionId\": \"eb3b51b4-4d38-4d00-b636-6b31da763f65\",\\n  \"state\": \"no such element\",\\n  ...8\",\\n      \"releaseLabel\": \"3.141.59\",\\n      \"class\": \"org.openqa.selenium.BuildInfo\"\\n    }\\n  },\\n  \"status\": 7\\n}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.\nE       For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html\nE       Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'\nE       Driver info: io.appium.java_client.ios.IOSDriver\nE       Capabilities {accessToken: eyJhbGciOiJSUzI1NiIsInR5cCI..., assert_javascript_enabled: true, authenticationTenant: operator, autoAcceptAlerts: true, browserName: , bundleId: com.apple.mobilesafari, cloud: tip.perfectomobile.com, databaseEnabled: false, deviceName: 00008030-001871003E20402E, deviceSessionId: testautomation@tip.com_Remo..., entityType: remote_web_driver, executionId: testautomation@tip.com_Remo..., executionTenantId: tip-perfectomobile-com, host: tip.perfectomobile.com, javascriptEnabled: true, liveStreamEnabled: false, locationContextEnabled: false, model: iPhone-11, networkConnectionEnabled: false, password: , platform: MAC, platformName: ios, platformVersion: 14.0.1, reportPdfUrl: https://tip.app.perfectomob..., scriptName: RemoteWebDriver, securityToken: , serverConnector: , serverHost: X.X.X.X:11602, simpleIsVisibleCheck: true, stopUrl: https://tip.perfectomobile...., takesScreenshot: true, testGridReportUrl: https://tip.app.perfectomob..., testRunWithPureAppiumFlow: false, udid: 00008030-001871003E20402E, useAppiumForHybrid: false, useAppiumForWeb: false, user: , webStorageEnabled: false, xcuitestFindOptimizations: true}\nE       Session ID: bc2e6897-8d89-416b-a3c6-4ad40cc5d321\nE       *** Element info: {Using=xpath, value=//*[@label='Accept Terms of Service']}\nE       Stacktrace:\nE           at sun.reflect.GeneratedConstructorAccessor854.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:45)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:423)\nE           at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException (W3CHttpResponseCodec.java:187)\nE           at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode (W3CHttpResponseCodec.java:122)\nE           at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode (W3CHttpResponseCodec.java:49)\nE           at org.openqa.selenium.remote.HttpCommandExecutor.execute (HttpCommandExecutor.java:158)\nE           at io.appium.java_client.remote.AppiumCommandExecutor.execute (AppiumCommandExecutor.java:239)\nE           at org.openqa.selenium.remote.RemoteWebDriver.execute (RemoteWebDriver.java:552)\nE           at io.appium.java_client.DefaultGenericMobileDriver.execute (DefaultGenericMobileDriver.java:41)\nE           at io.appium.java_client.AppiumDriver.execute (AppiumDriver.java:1)\nE           at io.appium.java_client.ios.IOSDriver.execute (IOSDriver.java:1)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElement (RemoteWebDriver.java:323)\nE           at io.appium.java_client.DefaultGenericMobileDriver.findElement (DefaultGenericMobileDriver.java:61)\nE           at io.appium.java_client.AppiumDriver.findElement (AppiumDriver.java:1)\nE           at io.appium.java_client.ios.IOSDriver.findElement (IOSDriver.java:1)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath (RemoteWebDriver.java:428)\nE           at io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath (DefaultGenericMobileDriver.java:151)\nE           at io.appium.java_client.AppiumDriver.findElementByXPath (AppiumDriver.java:1)\nE           at io.appium.java_client.ios.IOSDriver.findElementByXPath (IOSDriver.java:1)\nE           at org.openqa.selenium.By$ByXPath.findElement (By.java:353)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElement (RemoteWebDriver.java:315)\nE           at io.appium.java_client.DefaultGenericMobileDriver.findElement (DefaultGenericMobileDriver.java:57)\nE           at io.appium.java_client.AppiumDriver.findElement (AppiumDriver.java:1)\nE           at io.appium.java_client.ios.IOSDriver.findElement (IOSDriver.java:1)\nE           at com.perfectomobile.selenium.server.appium.AppiumIOSDriverWrapper$2.call (AppiumIOSDriverWrapper.java:94)\nE           at com.nexperience.function.execute.ExecuteCallableCommand.process (ExecuteCallableCommand.java:30)\nE           at com.nexperience.engine.script.command.AbstractScriptCommand.doExecute (AbstractScriptCommand.java:173)\nE           at com.nexperience.engine.script.command.ScriptCommandBase.execute (ScriptCommandBase.java:105)\nE           at com.nexperience.engine.script.tcl.event.CommandTclEvent.processEvent (CommandTclEvent.java:43)\nE           at com.nexperience.engine.script.tcl.event.MaseTclEvent.processEvent (MaseTclEvent.java:56)\nE           at tcl.lang.Notifier.serviceEvent (Notifier.java:457)\nE           at tcl.lang.Notifier.doOneEvent (Notifier.java:610)\nE           at tcl.lang.Notifier.processTclEvents (Notifier.java:786)\nE           at com.nexperience.engine.script.tcl.event.TclEventProcessor.start (TclEventProcessor.java:80)\nE           at com.nexperience.engine.script.tcl.TclInterpreter.startEventProcessing (TclInterpreter.java:552)\nE           at com.nexperience.engine.script.execution.step.StepExecutionEventProcessor.callImpl (StepExecutionEventProcessor.java:85)\nE           at com.nexperience.engine.script.execution.step.StepExecutionEventProcessor.callImpl (StepExecutionEventProcessor.java:21)\nE           at com.nexperience.util.thread.WrappedCallable.call (WrappedCallable.java:31)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:266)\nE           at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)\nE           at java.lang.Thread.run (Thread.java:748)\n\n../../venv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.e2e.interOp.captive_portal.nat_mode.ios.test_captive_portal_modes.TestNatModeCaptivePortalSuiteOneNAT object at 0x7f6818b94d90>\nrequest = <FixtureRequest for <Function test_Captive_Portal_WPA2_5g_Personal_NAT[setup_profiles0]>>, get_vif_state = ['nat_captive_wpa2_2g', 'nat_captive_wpa2_5g'], get_ap_logs = None\nget_APToMobileDevice_data = {'BtnRunSpeedTest': \"//*[text()='RUN SPEED TEST']\", 'UploadMbps': \"//*[@id='knowledge-verticals-internetspeedtest__upl...[@class='spiqle']\", 'appPackage-android': 'com.android.settings', 'bundleId-iOS-Safari': 'com.apple.mobilesafari', ...}\nsetup_perfectoMobile_iOS = (<appium.webdriver.webdriver.WebDriver (session=\"946f5764-358c-407d-ab86-5c81d76c5047\")>, <perfecto.client.PerfectoReportiumClient.PerfectoReportiumClient object at 0x7f681365a1c0>)\n\n    @allure.testcase(url=\"https://telecominfraproject.atlassian.net/browse/WIFI-5153\", name=\"WIFI-5153\")\n    @pytest.mark.sg12356\n    @pytest.mark.fiveg\n    @pytest.mark.wpa2_personal\n    def test_Captive_Portal_WPA2_5g_Personal_NAT(self, request, get_vif_state, get_ap_logs,\n                                                    get_APToMobileDevice_data,\n                                                    setup_perfectoMobile_iOS):\n    \n        profile_data = setup_params_general[\"ssid_modes\"][\"wpa2_personal\"][1]\n        ssidName = profile_data[\"ssid_name\"]\n        ssidPassword = profile_data[\"security_key\"]\n        print(\"SSID_NAME: \" + ssidName)\n        print(\"SSID_PASS: \" + ssidPassword)\n        get_vif_state.append(ssidName)\n        if ssidName not in get_vif_state:\n            allure.attach(name=\"retest,vif state ssid not available:\", body=str(get_vif_state))\n            pytest.xfail(\"SSID NOT AVAILABLE IN VIF STATE\")\n    \n        report = setup_perfectoMobile_iOS[1]\n        driver = setup_perfectoMobile_iOS[0]\n        connData = get_APToMobileDevice_data\n    \n        # Set Wifi/AP Mode\n>       ip, is_internet = captive_portal_ios(request, ssidName, ssidPassword, setup_perfectoMobile_iOS, connData)\n\ne2e/interOp/captive_portal/nat_mode/ios/test_captive_portal_modes.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nrequest = <FixtureRequest for <Function test_Captive_Portal_WPA2_5g_Personal_NAT[setup_profiles0]>>, WifiName = 'nat_captive_wpa2_5g', WifiPass = 'lanforge'\nsetup_perfectoMobile = (<appium.webdriver.webdriver.WebDriver (session=\"946f5764-358c-407d-ab86-5c81d76c5047\")>, <perfecto.client.PerfectoReportiumClient.PerfectoReportiumClient object at 0x7f681365a1c0>)\nconnData = {'BtnRunSpeedTest': \"//*[text()='RUN SPEED TEST']\", 'UploadMbps': \"//*[@id='knowledge-verticals-internetspeedtest__upl...[@class='spiqle']\", 'appPackage-android': 'com.android.settings', 'bundleId-iOS-Safari': 'com.apple.mobilesafari', ...}\n\n    def captive_portal_ios(request, WifiName, WifiPass, setup_perfectoMobile, connData):\n        print(\"\\n-------------------------------------\")\n        print(\"CaptivePortal Connection IOS\")\n        print(\"-------------------------------------\")\n    \n        reportFlag = True\n        is_internet = False\n        ip_address_element_text = False\n    \n        print(\"Verifying Wifi/AP Connection Details....\")\n        report = setup_perfectoMobile[1]\n        driver = setup_perfectoMobile[0]\n    \n        report.step_start(\"Switching Driver Context\")\n        print(\"Switching Context to Native\")\n        driver.switch_to.context('NATIVE_APP')\n        # driver.switch_to.context(contexts[0])\n    \n        report.step_start(\"Set Wifi Network to \" + WifiName)\n        # Open Settings Application\n        openApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n    \n        try:\n            time.sleep(2)\n            driver.implicitly_wait(2)\n            try:\n                print(\"Verifying Connected Wifi Connection\")\n                report.step_start(\"Loading Wifi Page\")\n                element = driver.find_element_by_xpath(\"//XCUIElementTypeCell[@name='Wi-Fi']\")\n                element.click()\n            except NoSuchElementException:\n                print(\"Exception: Verify Xpath - unable to click on Wifi\")\n    \n            time.sleep(2)\n            driver.implicitly_wait(2)\n            # --------------------To Turn on WIFi Switch if already OFF--------------------------------\n            try:\n                get_wifi_switch_element = driver.find_element_by_xpath(\"//*[@label='Wi-Fi' and @value='0']\")\n                get_wifi_switch_element_text = get_wifi_switch_element.text\n                try:\n                    if get_wifi_switch_element_text == \"0\" or get_wifi_switch_element_text == 0:\n                        get_wifi_switch_element = driver.find_element_by_xpath(\"//*[@label='Wi-Fi' and @value='0']\")\n                        driver.implicitly_wait(1)\n                        get_wifi_switch_element.click()\n                        driver.implicitly_wait(1)\n                        i = 0\n                        for i in range(5):\n                            try:\n                                get_wifi_switch_element = driver.find_element_by_xpath(\"//*[@label='Wi-Fi' and @value='1']\")\n                                get_wifi_switch_element_text = get_wifi_switch_element.text\n                            except:\n                                print(\"switch is OFF\")\n    \n                            if get_wifi_switch_element_text == \"1\" or get_wifi_switch_element_text == 1:\n                                print(\"WIFI Switch is ON\")\n                                break\n                            else:\n                                try:\n                                    get_wifi_switch_element = driver.find_element_by_xpath(\n                                        \"//*[@label='Wi-Fi' and @value='0']\")\n                                    get_wifi_switch_element_text = get_wifi_switch_element.text\n                                except:\n                                    print(\"WIFi switch is ON\")\n                        if (get_wifi_switch_element_text == \"0\" or get_wifi_switch_element_text == 0):\n                            print(\"switch is still OFF\")\n                            closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                            #return is_internet\n                    else:\n                        print(\"Switch is Still OFF\")\n                        closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                        #return is_internet\n                except:\n                    print(\"No switch element found\")\n            except:\n                print(\"get_wifi_switch_element is ON\")\n            # --------------------To Turn on WIFi Switch if already OFF--------------------------------\n    \n        except:\n            print(\"Cannot find WIFI element\")\n            closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n            #return is_internet\n    \n        # ---------------------This is to Forget current connected SSID-------------------------------\n    \n        try:\n            print(\"getting in to Additional details\")\n            additional_details_element = driver.find_element_by_xpath(\n                \"//*[@label='selected']/parent::*/parent::*/XCUIElementTypeButton[@label='More Info']\")\n            additional_details_element.click()\n            try:\n                print(\"Forget Connected Network\")\n                forget_ssid = driver.find_element_by_xpath(\"//*[@label='Forget This Network']\")\n                forget_ssid.click()\n                print(\"Forget old ssid\")\n                try:\n                    report.step_start(\"Forget SSID popup1\")\n                    forget_ssid_popup = driver.find_element_by_xpath(\"//*[@label='Forget']\")\n                    forget_ssid_popup.click()\n    \n                    print(\"**alert** Forget SSID popup killed **alert**\")\n                except:\n                    print(\"Forget SSID popup not found\")\n            except:\n                print(\"couldn't find forget ssid element\")\n        except:\n            print(\"No connected SSID\")\n    \n        # ---------------------This is to Forget current connected SSID-------------------------------\n    \n        # ---------------------To get all available SSID-------------------------------\n        print(\"Searching for Wifi: \" + WifiName)\n        # allure.attach(name= body=str(\"Searching for Wifi: \" + WifiName))\n        time.sleep(2)\n        print(\"Selecting Wifi: \" + WifiName)\n        ssid_found = False\n        available_ssids = False\n    \n        try:\n            for check_for_all_ssids in range(2):\n                available_ssids = get_all_available_ssids(driver)\n                try:\n                    if WifiName not in available_ssids:\n                        scrollDown(setup_perfectoMobile)\n                        time.sleep(2)\n                    else:\n                        ssid_found = True\n                        print(WifiName + \" : Found in Device\")\n                        # allure.attach(name= body=str(WifiName + \" : Found in Device\"))\n                        break\n                except:\n                    pass\n    \n            if not ssid_found:\n                print(\"could not found \" + WifiName + \" in device\")\n                closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n                return is_internet\n        except:\n            pass\n        # ---------------------To get all available SSID-------------------------------\n    \n        # ---------------------This is to Select SSID-------------------------------\n        try:\n            wifiSelectionElement = WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located((MobileBy.XPATH, \"//*[@label='\" + WifiName + \"']\")))\n            wifiSelectionElement.click()\n            print(\"Selecting SSID\")\n        except Exception as e:\n            print(\"couldn't connect to \" + WifiName)\n            request.config.cache.set(key=\"SelectingWifiFailed\", value=str(e))\n            closeApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n            return is_internet\n        # ---------------------This is to Select SSID-------------------------------\n    \n        # ---------------------Set Password-------------------------------\n        try:\n            wifiPassword = driver.find_element_by_xpath(\"//*[@label='Password']\")\n            wifiPassword.send_keys(WifiPass)\n        except NoSuchElementException:\n            print(\"Enter Password Page Not Loaded\")\n        # ---------------------Set Password-------------------------------\n    \n        # ---------------------Click on join-------------------------------\n        try:\n            joinBTN = driver.find_element_by_xpath(\"//*[@label='Join']\")\n            joinBTN.click()\n        except Exception as e:\n            print(\"Join Button Not Enabled...Password may not be needed\")\n        # ---------------------Click on join-------------------------------\n    \n        try:\n            time.sleep(8)\n            driver.implicitly_wait(8)\n            try:\n                time.sleep(12)\n                driver.implicitly_wait(8)\n                print(\"Acceptiong terms and Services\")\n                report.step_start(\"loading Terms Page\")\n                element = driver.find_element_by_xpath(\"//*[@label='Accept Terms of Service']\")\n                element.click()\n            except NoSuchElementException:\n                print(\"Exception: Accept Terms of Service Button Not Found\")\n                reportFlag = False\n>               assert reportFlag\nE               AssertionError\n\n../libs/perfecto_libs/iOS_lib.py:2315: AssertionError"}, "parameters": [{"name": "setup_profiles", "value": "{'mode': 'NAT', 'ssid_modes': {'open': [{'ssid_name': 'nat_captive_open_2g', 'appliedRadios': ['2G']}, {'ssid_name': 'nat_captive_open_5g', 'appliedRadios': ['5G']}], 'wpa': [{'ssid_name': 'nat_captive_wpa_2g', 'appliedRadios': ['2G'], 'security_key': 'lanforge'}, {'ssid_name': 'nat_captive_wpa_5g', 'appliedRadios': ['5G'], 'security_key': 'lanforge'}], 'wpa2_personal': [{'ssid_name': 'nat_captive_wpa2_2g', 'appliedRadios': ['2G'], 'security_key': 'lanforge', 'security': 'psk2'}, {'ssid_name': 'nat_captive_wpa2_5g', 'appliedRadios': ['5G'], 'security_key': 'lanforge', 'security': 'psk2'}], 'wpa3_personal': [{'ssid_name': 'nat_captive_wpa3_2g', 'appliedRadios': ['2G'], 'security_key': 'lanforge'}, {'ssid_name': 'nat_captive_wpa3_5g', 'appliedRadios': ['5G'], 'security_key': 'lanforge'}]}, 'rf': {}, 'radius': False, 'captive_portal': True}"}], "start": 1639162742148, "stop": 1639162839161, "uuid": "7ce078f9-4e6d-4b51-b199-689224415ee7", "historyId": "909372e91dc0a1961597e280baf4bcc3", "testCaseId": "21987f6cd4ad714ef54a5afb1ece4ea3", "fullName": "e2e.interOp.captive_portal.nat_mode.ios.test_captive_portal_modes.TestNatModeCaptivePortalSuiteOneNAT#test_Captive_Portal_WPA2_5g_Personal_NAT", "labels": [{"name": "subSuite", "value": "NAT Mode Captive Portal : Suite-A"}, {"name": "suite", "value": "interop sanity"}, {"name": "feature", "value": "NAT MODE CAPTIVE PORTAL"}, {"name": "tag", "value": "sg12356"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "ios"}, {"name": "tag", "value": "interop_ios"}, {"name": "tag", "value": "wpa2_personal"}, {"name": "tag", "value": "nat"}, {"name": "tag", "value": "captive_portal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "regression_interop"}, {"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "InteropsuiteA"}, {"name": "tag", "value": "interop"}, {"name": "parentSuite", "value": "e2e.interOp.captive_portal.nat_mode.ios"}, {"name": "host", "value": "imgd"}, {"name": "thread", "value": "22605-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.interOp.captive_portal.nat_mode.ios.test_captive_portal_modes"}], "links": [{"type": "link", "url": "https://tip.app.perfectomobile.com/reporting/library?externalId[0]=testautomation@tip.com_RemoteWebDriver_21-12-10_18_58_38_2712&_timestamp[0]=1639162718623", "name": "iPhone-11"}, {"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-5153", "name": "WIFI-5153"}]}