name: Deploy SDK with Docker Compose in Kubernetes

inputs:
  deployment_version:
    default: 'main'
    description: 'OpenWIFI deployment repository version to be deployed.'
    required: true
  owgw_version:
    default: 'master'
    description: 'OpenWIFI Gateway version to be deployed.'
    required: false
  owsec_version:
    default: 'main'
    description: 'OpenWIFI Security version to be deployed.'
    required: false
  owfms_version:
    default: 'main'
    description: 'OpenWIFI Firmware version to be deployed.'
    required: false
  owprov_version:
    default: 'main'
    description: 'OpenWIFI Provisioning version to be deployed.'
    required: false
  owanalytics_version:
    default: 'main'
    description: 'OpenWIFI Analytics version to be deployed.'
    required: false
  owsub_version:
    default: 'main'
    description: 'OpenWIFI Subscription (Userportal) version to be deployed.'
    required: false
  websocket_cert:
    description: 'Certificate for OWGW websocket endpoint'
    required: true
  websocket_key:
    description: 'Key for OWGW websocket endpoint'
    required: true
  owsec_default_username:
    description: 'OpenWIFI default username'
    required: true
  owsec_default_password:
    description: 'OpenWIFI default password'
    required: true
  owsec_hashed_default_password:
    description: 'OpenWIFI hashed default password'
    required: true
  owsec_new_password:
    description: 'New OpenWIFI to set for the deployment'
    required: true
  owfms_s3_secret:
    description: 'Secret access key to access S3 firmware bucket'
    required: true
  owfms_s3_key:
    description: 'Access key ID to access S3 firmware bucket'
    required: true
  rtty_token:
    required: true

outputs:
  gateway_url:
    value: ${{ steps.set_outputs.outputs.gateway_url }}
  sec_url:
    value: ${{ steps.set_outputs.outputs.sec_url }}
  namespace:
    value: ${{ steps.set_outputs.outputs.namespace }}

runs:
  using: "composite"
  steps:
    - name: Checkout wlan-cloud-ucentral-deploy repo
      uses: actions/checkout@v2
      with:
        repository: Telecominfraproject/wlan-cloud-ucentral-deploy
        path: wlan-cloud-ucentral-deploy

    - name: Prepare certificates from secrets
      env:
        WEBSOCKET_CERT: ${{ inputs.websocket_cert }}
        WEBSOCKET_KEY: ${{ inputs.websocket_key }}
      shell: bash
      working-directory: wlan-cloud-ucentral-deploy/docker-compose
      run: |
        echo "${{ env.WEBSOCKET_CERT }}" | base64 -d > websocket-cert.pem
        echo "${{ env.WEBSOCKET_KEY }}" | base64 -d > websocket-key.pem

    - name: Fetch kubeconfig
      shell: bash
      run: |
        aws eks update-kubeconfig --name ${{ env.AWS_EKS_NAME }}

    - name: Set outputs
      shell: bash
      id: set_outputs
      run: |
        echo "::set-output name=gateway_url::ow-docker-compose-${{ github.run_id }}.cicd.lab.wlan.tip.build"
        echo "::set-output name=sec_url::ow-docker-compose-${{ github.run_id }}.cicd.lab.wlan.tip.build"
        echo "::set-output name=namespace::ow-docker-compose-${{ github.run_id }}"

    - name: Create Kubernetes namespace and secret
      shell: bash
      working-directory: wlan-cloud-ucentral-deploy/docker-compose
      run: |
        kubectl create ns ${{ steps.set_outputs.outputs.namespace }}
        kubectl create secret generic tip-cicd-wildcard-certs --from-file=websocket-cert.pem=websocket-cert.pem --from-file=websocket-key.pem=websocket-key.pem -n ${{ steps.set_outputs.outputs.namespace }}

    - name: Deploy OpenWIFI Cloud SDK
      working-directory: wlan-cloud-ucentral-deploy/docker-compose
      env:
        OWSEC_DEFAULT_USERNAME: ${{ inputs.owsec_default_username }}
        OWSEC_HASHED_DEFAULT_PASSWORD: ${{ inputs.owsec_hashed_default_password }}
        OWFMS_S3_SECRET: ${{ inputs.owfms_s3_secret }}
        OWFMS_S3_KEY: ${{ inputs.owfms_s3_key }}
        RTTY_TOKEN: ${{ inputs.rtty_token }}
      shell: bash
      run: |
        cat <<EOF | kubectl create -f - -n ow-docker-compose-${{ github.run_id }}
        apiVersion: v1
        kind: Service
        metadata:
          name: ${{ steps.set_outputs.outputs.namespace }}
          annotations:
            service.beta.kubernetes.io/aws-load-balancer-type: "nlb-ip"
            service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
            external-dns.alpha.kubernetes.io/hostname: ${{ steps.set_outputs.outputs.namespace }}.cicd.lab.wlan.tip.build
            service.beta.kubernetes.io/aws-load-balancer-backend-protocol: ssl
            service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-2:289708231103:certificate/bfa89c7a-5b64-4a8a-bcfe-ffec655b5285"
            service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "16002,16003,443,16001,16004,16005,8443,5912,5913,16009,16006"
          labels:
            app: ${{ steps.set_outputs.outputs.namespace }}
        spec:
          selector:
            app: ${{ steps.set_outputs.outputs.namespace }}
          type: LoadBalancer
          ports:
          - name: owgw-websocket
            port: 15002
            targetPort: 15002
            protocol: TCP
          - name: owgw-restapi
            port: 16002
            targetPort: 16002
            protocol: TCP
          - name: owgw-alivecheck
            port: 16102
            targetPort: 16102
            protocol: TCP
          - name: owgw-fileupload
            port: 16003
            targetPort: 16003
            protocol: TCP
          - name: owgw-rttys
            port: 5912
            targetPort: 5912
            protocol: TCP
          - name: owgw-rttys-view
            port: 5913
            targetPort: 5913
          - name: owgw-ui-http
            port: 80
            targetPort: 80
            protocol: TCP
          - name: owgw-ui-https
            port: 443
            targetPort: 443
            protocol: TCP
          - name: owsec-restapi
            port: 16001
            targetPort: 16001
            protocol: TCP
          - name: owsec-alivecheck
            port: 16101
            targetPort: 16101
            protocol: TCP
          - name: owfms-restapi
            port: 16004
            targetPort: 16004
            protocol: TCP
          - name: owfms-alivecheck
            port: 16104
            targetPort: 16104
            protocol: TCP
          - name: owprov-restapi
            port: 16005
            targetPort: 16005
            protocol: TCP
          - name: owprov-alivecheck
            port: 16105
            targetPort: 16105
            protocol: TCP
          - name: owprov-ui-http
            port: 8080
            targetPort: 8080
            protocol: TCP
          - name: owprov-ui-https
            port: 8443
            targetPort: 8443
            protocol: TCP
          - name: owanalytics-restapi
            port: 16009
            targetPort: 16009
            protocol: TCP
          - name: owanalytics-alivecheck
            port: 16109
            targetPort: 16109
            protocol: TCP
          - name: owsub-restapi
            port: 16006
            targetPort: 16006
            protocol: TCP
          - name: owsub-alivecheck
            port: 16106
            targetPort: 16106
            protocol: TCP
        ---
        apiVersion: v1
        kind: Pod
        metadata:
          name: ${{ steps.set_outputs.outputs.namespace }}
          annotations:
            cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
          labels:
            app: ${{ steps.set_outputs.outputs.namespace }}
        spec:
          volumes:
          - name: client-certs
            emptyDir: {}
          - name: deploy-repo
            emptyDir: {}
          - name: tip-cicd-wildcard-certs
            secret:
              secretName: tip-cicd-wildcard-certs
          containers:
          - name: docker-daemon
            image: docker:dind
            env:
            - name: DOCKER_TLS_CERTDIR
              value: "/certs"
            securityContext:
              privileged: true
            volumeMounts:
            - name: client-certs
              mountPath: /certs/client
            - name: deploy-repo
              mountPath: /wlan-cloud-ucentral-deploy
        
          - name: docker-compose-deployment
            image: docker/compose:latest
            command: ["/bin/sh", "-c"]
            args: ["apk add git; wget https://raw.githubusercontent.com/Telecominfraproject/wlan-cloud-ucentral-deploy/${{ inputs.deployment_version }}/docker-compose/deploy.sh; chmod +x deploy.sh; sh deploy.sh"]
            env:
            - name: DOCKER_TLS_VERIFY
              value: "true"
            - name: DOCKER_HOST
              value: "127.0.0.1:2376"
            - name: DOCKER_CERT_PATH
              value: "/certs/client"
            - name: DEPLOY_VERSION
              value: "${{ inputs.deployment_version }}"
            - name: OWGW_TAG
              value: "${{ inputs.owgw_version }}"
            - name: OWGWUI_TAG
              value: "main"
            - name: OWSEC_TAG
              value: "${{ inputs.owsec_version }}"
            - name: OWFMS_TAG
              value: "${{ inputs.owfms_version }}"
            - name: OWPROV_TAG
              value: "${{ inputs.owprov_version }}"
            - name: OWPROVUI_TAG
              value: "main"
            - name: OWANALYTICS_TAG
              value: "${{ inputs.owanalytics_version }}"
            - name: OWSUB_TAG
              value: "${{ inputs.owsub_version }}"
            - name: INTERNAL_OWGW_HOSTNAME
              value: "owgw.wlan.local"
            - name: INTERNAL_OWSEC_HOSTNAME
              value: "owsec.wlan.local"
            - name: INTERNAL_OWFMS_HOSTNAME
              value: "owfms.wlan.local"
            - name: INTERNAL_OWPROV_HOSTNAME
              value: "owprov.wlan.local"
            - name: INTERNAL_OWANALYTICS_HOSTNAME
              value: "owanalytics.wlan.local"
            - name: INTERNAL_OWSUB_HOSTNAME
              value: "owsub.wlan.local"
            - name: SYSTEM_URI_UI
              value: "https://${{ steps.set_outputs.outputs.namespace }}.cicd.lab.wlan.tip.build"
            - name: DEFAULT_UCENTRALSEC_URL
              value: "https://${{ steps.set_outputs.outputs.sec_url }}:16001"
            - name: OWGW_FILEUPLOADER_HOST_NAME
              value: "${{ steps.set_outputs.outputs.gateway_url }}"
            - name: OWGW_FILEUPLOADER_URI
              value: "https://${{ steps.set_outputs.outputs.gateway_url }}:16003"
            - name: OWGW_SYSTEM_URI_PRIVATE
              value: "https://owgw.wlan.local:17002"
            - name: OWGW_SYSTEM_URI_PUBLIC
              value: "https://${{ steps.set_outputs.outputs.gateway_url }}:16002"
            - name: OWGW_RTTY_SERVER
              value: "${{ steps.set_outputs.outputs.gateway_url }}"
            - name: RTTY_TOKEN
              value: "$RTTY_TOKEN"
            - name: OWSEC_AUTHENTICATION_DEFAULT_USERNAME
              value: "$OWSEC_DEFAULT_USERNAME"
            - name: OWSEC_AUTHENTICATION_DEFAULT_PASSWORD
              value: "$OWSEC_HASHED_DEFAULT_PASSWORD"
            - name: OWSEC_SYSTEM_URI_PRIVATE
              value: "https://owsec.wlan.local:17001"
            - name: OWSEC_SYSTEM_URI_PUBLIC
              value: "https://${{ steps.set_outputs.outputs.sec_url }}:16001"
            - name: OWFMS_SYSTEM_URI_PRIVATE
              value: "https://owfms.wlan.local:17004"
            - name: OWFMS_SYSTEM_URI_PUBLIC
              value: "https://${{ steps.set_outputs.outputs.namespace }}.cicd.lab.wlan.tip.build:16004"
            - name: OWFMS_S3_SECRET
              value: "$OWFMS_S3_SECRET"
            - name: OWFMS_S3_KEY
              value: "$OWFMS_S3_KEY"
            - name: OWPROV_SYSTEM_URI_PRIVATE
              value: "https://owprov.wlan.local:17005"
            - name: OWPROV_SYSTEM_URI_PUBLIC
              value: "https://${{ steps.set_outputs.outputs.namespace }}.cicd.lab.wlan.tip.build:16005"
            - name: OWANALYTICS_SYSTEM_URI_PRIVATE
              value: "https://owanalytics.wlan.local:17009"
            - name: OWANALYTICS_SYSTEM_URI_PUBLIC
              value: "https://${{ steps.set_outputs.outputs.namespace }}.cicd.lab.wlan.tip.build:16009"
            - name: OWSUB_SYSTEM_URI_PRIVATE
              value: "https://owsub.wlan.local:17006"
            - name: OWSUB_SYSTEM_URI_PUBLIC
              value: "https://${{ steps.set_outputs.outputs.namespace }}.cicd.lab.wlan.tip.build:16006"
            - name: WEBSOCKET_CERT
              value: "/tip-cicd-wildcard-certs/websocket-cert.pem"
            - name: WEBSOCKET_KEY
              value: "/tip-cicd-wildcard-certs/websocket-key.pem"
            volumeMounts:
            - name: client-certs
              mountPath: /certs/client
            - name: deploy-repo
              mountPath: /wlan-cloud-ucentral-deploy
            - name: tip-cicd-wildcard-certs
              readOnly: true
              mountPath: "/tip-cicd-wildcard-certs"
        EOF

    - name: Show resource state on deployment failure
      shell: bash
      if: failure()
      run: |
        kubectl get pods --namespace ${{ steps.set_outputs.outputs.namespace }}
        kubectl get services --namespace ${{ steps.set_outputs.outputs.namespace }}

    - name: Describe pods on deployment failure
      shell: bash
      if: failure()
      run: |
        kubectl describe pods --namespace ${{ steps.set_outputs.outputs.namespace }}

    - name: Describe services on deployment failure
      shell: bash
      if: failure()
      run: |
        kubectl describe services --namespace ${{ steps.set_outputs.outputs.namespace }}

    - name: Change password and check if deployment is ready using clustersysteminfo image
      env:
        OWSEC: "${{ steps.set_outputs.outputs.sec_url }}:16001"
        OWSEC_DEFAULT_USERNAME: ${{ inputs.owsec_default_username }}
        OWSEC_DEFAULT_PASSWORD: ${{ inputs.owsec_default_password }}
        OWSEC_NEW_PASSWORD: ${{ inputs.owsec_new_password }}
        CHECK_RETRIES: 60
      shell: bash
      run: |
        docker run --rm \
          -e OWSEC \
          -e OWSEC_DEFAULT_USERNAME \
          -e OWSEC_DEFAULT_PASSWORD \
          -e OWSEC_NEW_PASSWORD \
          -e CHECK_RETRIES \
          tip-tip-wlan-cloud-ucentral.jfrog.io/clustersysteminfo:main
