name: nightly build
env:
  DOCKER_SERVER: tip-tip-wlan-cloud-docker-repo.jfrog.io
  DOCKER_USER_NAME: ${{ secrets.DOCKER_USER_NAME }}
  DOCKER_USER_PASSWORD: ${{ secrets.DOCKER_USER_PASSWORD }}
  # AWS credentials
  AWS_EKS_NAME: tip-wlan-main
  AWS_DEFAULT_OUTPUT: json
  AWS_DEFAULT_REGION: us-east-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CLIENT_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CLIENT_KEY }}
  # Cloud SDK certs
  CACERT: ${{ secrets.CACERT }}
  CAKEY: ${{ secrets.CAKEY }}
  # https://stackoverflow.com/questions/59977364/github-actions-how-use-strategy-matrix-with-script
  testbeds: '[
    {
      "number": "01",
      "ip_address": "10.28.3.6",
      "ap_model": "ECW5410",
      "cleanup": false
    },
    {
      "number": "03",
      "ip_address": "10.28.3.10",
      "ap_model": "ECW5410",
      "cleanup": true
    },
    {
      "number": "04",
      "ip_address": "10.28.3.12",
      "ap_model": "ECW5410",
      "cleanup": true
    }
  ]'

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  schedule:
  - cron: '15 0 * * *'

jobs:
  generate-matrix:
    name: Generate matrix for build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: generate-matrix
      id: set-matrix
      run: |
        echo '::set-output name=matrix::{"include":${{ env.testbeds }}}'

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Testing repo
      uses: actions/checkout@v2
      with:
        path: wlan-testing
    - name: Checkout LANforge scripts repo
      uses: actions/checkout@v2
      with:
        path: wlan-lanforge-scripts
        repository: Telecominfraproject/wlan-lanforge-scripts

    - name: docker login
      shell: bash
      run: docker login ${{ env.DOCKER_SERVER }} -u ${{ env.DOCKER_USER_NAME }} -p ${{ env.DOCKER_USER_PASSWORD }}
    - name: build docker image
      shell: bash
      run: docker build -t ${{ env.DOCKER_SERVER }}/cloud-sdk-nightly:pytest-${{ github.run_id }} -f wlan-testing/pytest/Dockerfile .
    - name: push docker image
      shell: bash
      run: docker push ${{ env.DOCKER_SERVER }}/cloud-sdk-nightly:pytest-${{ github.run_id }}

  cloudsdk:
    runs-on: ubuntu-latest
    needs: [ generate-matrix ]
    strategy:
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}

    steps:
    - name: Checkout pki scripts repo
      uses: actions/checkout@v2
      with:
        path: wlan-pki
        repository: Telecominfraproject/wlan-pki-cert-scripts
    - name: Checkout Cloud SDK repo
      uses: actions/checkout@v2
      with:
        path: wlan-helm
        repository: Telecominfraproject/wlan-cloud-helm
    - name: Checkout helm values repo
      uses: actions/checkout@v2
      with:
        path: toolsmith
        repository: Telecominfraproject/Toolsmith
        token: ${{ secrets.PAT_TOKEN }}
        ref: feature/WIFI-1350

    - name: Prepare environment
      shell: bash
      run: |
        mkdir -p ./wlan-pki/testCA/private
        mkdir -p ./wlan-pki/testCA/newcerts
        mkdir -p ./wlan-pki/generated
        touch ./wlan-pki/testCA/index.txt
        echo "01" > ./wlan-pki/testCA/serial.txt
        echo "${{ env.CACERT }}" | base64 -d > ./wlan-pki/testCA/cacert.pem
        echo "${{ env.CAKEY }}" | base64 -d > ./wlan-pki/testCA/private/cakey.pem
        ./toolsmith/helm-values/aws-cicd-testbed-deployment.yaml.sh ${{ matrix.number }} > testbed-deployment.yaml

    - name: Generate certs
      shell: bash
      run: |
        cd ./wlan-pki
        ./generate_all.sh true
        ./copy-certs-to-helm.sh "../wlan-helm"

    - name: Fetch kubeconfig
      shell: bash
      run: |
        aws eks update-kubeconfig  --name ${{ env.AWS_EKS_NAME }}
    - name: Deploy Cloud SDK
      shell: bash
      run: |
        cd ./wlan-helm/tip-wlan
        helm dependency update
        helm upgrade --install tip . -f ../../testbed-deployment.yaml --create-namespace --namespace nola-${{ matrix.number }}

  test:
    runs-on: ubuntu-latest
    needs: [ build, cloudsdk, generate-matrix ]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}

    steps:
    - name: Fetch kubeconfig
      shell: bash
      run: |
        aws eks update-kubeconfig  --name ${{ env.AWS_EKS_NAME }}

    - name: Wait for access points to come up
      shell: bash
      run: |
        counter=0
        until [ $counter -gt 5 ]
        do
          echo Counter: $counter
          ((counter++))
          sleep 5
          # do something to check AP connected back
        done

    - name: Run tests
      shell: bash
      timeout-minutes: 30
      run: |
        kubectl config set-context $(kubectl config current-context) --namespace nola-${{ matrix.number }}
        today=$(date +"%d-%m-%Y")
        kubectl delete job nightly-ci-$today --wait=true --ignore-not-found=true

        cat <<EOF | kubectl apply -f -
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: nightly-ci-$today
        spec:
          template:
            spec:
              containers:
              - name: tests
                image: ${{ env.DOCKER_SERVER }}/cloud-sdk-nightly:pytest-${{ github.run_id }}
                args: 
                - "-c"
                - "pytest --no-testrails --skip-update-firmware -o lanforge-ip-address=${{ matrix.ip_address }} -o sdk-base-url=wlan-portal-svc-nola-${{ matrix.number }}.cicd.lab.wlan.tip.build --access-points ${{ matrix.ap_model }}; sleep 75"
                command: [ "bash" ]
              imagePullSecrets:
              - name: tip-docker-registry-key
              restartPolicy: Never
          backoffLimit: 0
        EOF
        sleep 60 # needed to wait for the pod to come up
        podname=$(kubectl get pods -o name -l job-name=nightly-ci-$today | sed "s/pod\///")
        until [ -s test_everything.xml ]
        do
          echo "waiting for tests to complete"
          kubectl cp $podname:/ci/test_everything.xml test_everything.xml
          sleep 15
        done
        kubectl logs $podname
        echo {{ github.ref }}

    - name: Post links to PR
      uses: unsplash/comment-on-pr@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        msg: "Grafana Link: https://grafana.lab.wlan.tip.build/TO_BE_PROVIDED\n Kibana Link: https://kibana.lab.wlan.tip.build/TO_BE_PROVIDED"
        check_for_duplicate_msg: true
      if: contains(github.ref, 'pull')

    - name: Publish test results to PR
      uses: EnricoMi/publish-unit-test-result-action@v1.7
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: "**/*.xml"
     if: always()

  cleanup:
    runs-on: ubuntu-latest
    needs: [ generate-matrix, test ]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}

    steps:
    - name: Fetch kubeconfig
      shell: bash
      run: |
        aws eks update-kubeconfig  --name ${{ env.AWS_EKS_NAME }}
      if: always() && matrix.cleanup

    - name: Remove temporary Cloud SDK instances
      shell: bash
      run: |
        helm uninstall  tip --namespace nola-${{ matrix.number }}
      if: always() && matrix.cleanup
